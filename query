WITH valid_customers AS (
    SELECT DISTINCT cg_ecn
    FROM client_group_level_table_temp
),
recent_interactions AS (
    SELECT 
        a.ecn,
        COUNT(a.purpose) AS Interactions_count
    FROM sch_sb_sfdc.v_sbcrm_interaction@crv_p01bobgi a
    JOIN valid_customers c ON a.ecn = c.cg_ecn
    WHERE months_between(sysdate, completed_date) <= 3
    GROUP BY a.ecn
),
last_contact AS (
    SELECT 
        a.ecn,
        MAX(completed_date) AS Last_contacted_date
    FROM sch_sb_sfdc.v_sbcrm_interaction@crv_p01bobgi a
    JOIN valid_customers c ON a.ecn = c.cg_ecn
    GROUP BY a.ecn
)
SELECT 
    COALESCE(ri.ecn, lc.ecn) AS CG_ECN,
    NVL(ri.Interactions_count, 0) AS Interactions_count,
    lc.Last_contacted_date
FROM recent_interactions ri
FULL OUTER JOIN last_contact lc ON ri.ecn = lc.ecn
WHERE COALESCE(ri.ecn, lc.ecn) IS NOT NULL;
-----------------------------------------------------
WITH latest_data AS (
    SELECT /*+ MATERIALIZE */
        ecn,
        purpose,
        completed_date
    FROM sch_sb_sfdc.v_sbcrm_interaction@crv_p01bobgi
    WHERE months_between(sysdate, completed_date) <= 3
),
valid_customers AS (
    SELECT /*+ MATERIALIZE */ 
        DISTINCT CG_ECN 
    FROM CLIENT_GROUP_TABLE
)
SELECT 
    a.ecn,
    SUM(a.purpose) AS total_interactions 
FROM latest_data a
JOIN valid_customers c ON a.ecn = c.CG_ECN
GROUP BY a.ecn;
--------------------------------
WITH latest_period AS (
    SELECT MAX(period_dt) AS max_dt 
    FROM cdid.ts_bbg_account
),
valid_customers AS (
    SELECT DISTINCT CG_ECN 
    FROM CLIENT_GROUP_TABLE
)
SELECT a.cust_id, SUM(a.commitment) AS total_commitment
FROM cdid.ts_bbg_account a
JOIN latest_period p ON a.period_dt = p.max_dt
JOIN valid_customers c ON a.cust_id = c.CG_ECN
GROUP BY a.cust_id;

---------------------------
def create_oracle_table_from_dataframe(df, table_name, cursor, connection):
    # 1. Create simple Oracle data type mapping
    def get_oracle_type(dtype):
        if pd.api.types.is_integer_dtype(dtype):
            return "NUMBER"
        elif pd.api.types.is_float_dtype(dtype):
            return "NUMBER"
        elif pd.api.types.is_datetime64_dtype(dtype):
            return "DATE"
        else:
            return "VARCHAR2(255)"  # Default to VARCHAR2
    
    # 2. Generate CREATE TABLE statement
    columns = []
    for col, dtype in df.dtypes.items():
        oracle_type = get_oracle_type(dtype)
        # Use double quotes for column names to handle case sensitivity and special characters
        columns.append(f'"{col}" {oracle_type}')
    
    create_sql = f'CREATE TABLE "{table_name}" ({", ".join(columns)})'
    
    # 3. Execute CREATE TABLE
    try:
        cursor.execute(create_sql)

columns = ', '.join([f'"{col}"' for col in df.columns])
    placeholders = ', '.join([f':{i+1}' for i in range(len(df.columns))])
    insert_sql = f'INSERT INTO "{table_name}" ({columns}) VALUES ({placeholders})'
    
    # 5. Insert data
    data = [tuple(x) for x in df.replace({np.nan: None}).values]
    cursor.executemany(insert_sql, data)
    connection.commit()


-----------------------------------------
# Optimize the SQL query
optimized_query = """
SELECT 
    cg.ID as CG_ID, 
    cg.name as CG_NAME, 
    cg.ECN as CG_ECN, 
    cg.portfolio_cd as CG_PORTFOLIO_CD, 
    cg.RM as CG_EM, 
    cg.MANAGED as CG_MANAGED, 
    cg.customer_or_prospect_rs as CG_PROSPECT, 
    cg.IS_CUSTOMER, 
    cg.BNK_REV_RS as BANK_REVENUE, 
    cg.TOTAL_GROSS_SALES_RS as CG_GROSS_SALES, 
    usr.FIRSTNAME as BANKER_FORSTNAME, 
    usr.LASTNAME as BANKER_LASTNAME, 
    acc.BILLINGSTREET, 
    acc.BILLINGCITY, 
    acc.BILLINGSTATE, 
    acc.BILLINGPOSTALCODE
FROM 
    SCH_CRV_SFDC.T_CRV_BKP_CLIENT_GROUP@crv_p01bobgi cg
JOIN (
    SELECT DISTINCT portfolio_cd 
    FROM SCH_CRV_SFDC.T_CRV_BKP_CLIENT_GROUP@crv_p01bobgi 
    WHERE portfolio_cd IN ({})
) filter_ports ON cg.portfolio_cd = filter_ports.portfolio_cd
LEFT JOIN 
    SCH_CRV_SFDC.T_CRV_BKP_USER@crv_p01bobgi usr
    ON cg.ownerid = usr.id
LEFT JOIN 
    CRM_LITE.V_CRV_BKP_ACCOUNT@crv_p01bobgi acc
    ON cg.ECN = acc.ECN
WHERE 
    cg.isdeleted = 0
"""
-------------------------------------------------------------------------

WITH PORTFOLIO_CODES AS (
    SELECT DISTINCT A.PORT_ID AS PORTFOLIO_CD
    FROM BANKER.BP_BBSG_INV A
    INNER JOIN BANKER.T_EMP B ON A.EMP_ID = B.EMP_ID
    WHERE A.PORT_TYP_CD IN ('BUSCBRM', 'BUSSTRA', 'BUSVIRT')
    AND A.PORT_ID_STAT IN ('A', 'L')
),
CLIENT_GROUPS AS (
    SELECT id AS client_group_id, ECN AS CG_ECN, PORTFOLIO_CD
    FROM CRM_LITE.VT_CRV_BKP_CLIENT_GROUP@crv_p01bobgi CG
    WHERE EXISTS (
        SELECT 1 FROM PORTFOLIO_CODES PC 
        WHERE CG.PORTFOLIO_CD = PC.PORTFOLIO_CD
    )
)
SELECT 
    CG.CG_ECN, 
    A.ECN, 
    CG.PORTFOLIO_CD, 
    RC.client_group
FROM CLIENT_GROUPS CG
JOIN CRM_LITE.V_CRV_BKP_RELATED_CLIENT@crv_p01bobgi RC ON RC.client_group = CG.client_group_id
JOIN CRM_LITE.V_CRV_BKP_ACCOUNT@crv_p01bobgi A ON RC.customer = A.id;


WITH PORTFOLIO_CODES AS (
    SELECT DISTINCT A.PORT_ID AS PORTFOLIO_CD
    FROM BANKER.BP_BBSG_INV A
    INNER JOIN BANKER.T_EMP B ON A.EMP_ID = B.EMP_ID
    WHERE A.PORT_TYP_CD IN ('BUSCBRM', 'BUSSTRA', 'BUSVIRT')
    AND A.PORT_ID_STAT IN ('A', 'L')
),
CLIENT_GROUPS AS (
    SELECT id AS client_group_id, ECN AS CG_ECN, PORTFOLIO_CD
    FROM CRM_LITE.VT_CRV_BKP_CLIENT_GROUP@crv_p01bobgi CG
    WHERE EXISTS (
        SELECT 1 FROM PORTFOLIO_CODES PC 
        WHERE CG.PORTFOLIO_CD = PC.PORTFOLIO_CD
    )
)
SELECT 
    CG.CG_ECN, 
    A.ECN, 
    CG.PORTFOLIO_CD, 
    RC.client_group,
    CASE WHEN CG.CG_ECN IS NULL THEN 'Missing CG_ECN' ELSE 'Has CG_ECN' END AS ECN_STATUS
FROM CLIENT_GROUPS CG
JOIN CRM_LITE.V_CRV_BKP_RELATED_CLIENT@crv_p01bobgi RC ON RC.client_group = CG.client_group_id
JOIN CRM_LITE.V_CRV_BKP_ACCOUNT@crv_p01bobgi A ON RC.customer = A.id
ORDER BY CASE WHEN CG.CG_ECN IS NULL THEN 0 ELSE 1 END, A.ECN;



WITH PORTFOLIO_CODES AS (
    SELECT DISTINCT A.PORT_ID AS PORTFOLIO_CD
    FROM BANKER.BP_BBSG_INV A
    INNER JOIN BANKER.T_EMP B ON A.EMP_ID = B.EMP_ID
    WHERE A.PORT_TYP_CD IN ('BUSCBRM', 'BUSSTRA', 'BUSVIRT')
    AND A.PORT_ID_STAT IN ('A', 'L')
),
CLIENT_GROUPS AS (
    SELECT id AS client_group_id, ECN AS CG_ECN, PORTFOLIO_CD
    FROM CRM_LITE.VT_CRV_BKP_CLIENT_GROUP@crv_p01bobgi CG
    WHERE EXISTS (
        SELECT 1 FROM PORTFOLIO_CODES PC 
        WHERE CG.PORTFOLIO_CD = PC.PORTFOLIO_CD
    )
)
SELECT 
    CG.CG_ECN, 
    A.ECN, 
    CG.PORTFOLIO_CD, 
    RC.client_group,
    CASE WHEN SEGS.ECN IS NOT NULL THEN 1 ELSE 0 END AS PRESENT_IN_SEG,
    SEGS.DEPOSIT_BAL,
    SEGS.CS_NEW_NS,
    RC.BANK_REV,
    RC.GROSS_SALES
FROM CLIENT_GROUPS CG
JOIN CRM_LITE.V_CRV_BKP_RELATED_CLIENT@crv_p01bobgi RC ON RC.client_group = CG.client_group_id
JOIN CRM_LITE.V_CRV_BKP_ACCOUNT@crv_p01bobgi A ON RC.customer = A.id
LEFT JOIN SEGMENT_CUST_SBS SEGS ON A.ECN = SEGS.ECN;


#############################################
WITH PORTFOLIO_CODES AS (
    SELECT DISTINCT A.PORT_ID AS PORTFOLIO_CD
    FROM BANKER.BP_BBSG_INV A
    INNER JOIN BANKER.T_EMP B ON A.EMP_ID = B.EMP_ID
    WHERE A.PORT_TYP_CD IN ('BUSCBRM', 'BUSSTRA', 'BUSVIRT')
    AND A.PORT_ID_STAT IN ('A', 'L')
)
SELECT 
    CG.ECN AS CG_ECN, 
    A.ECN, 
    CG.PORTFOLIO_CD, 
    CG.id AS client_group_id,
    CASE WHEN SEGS.ECN IS NOT NULL THEN 1 ELSE 0 END AS PRESENT_IN_SEG,
    SEGS.DEPOSIT_BAL,
    SEGS.CS_NEW_NS,
    A.BILLINGSTREET,
    A.BILLINGCITY,
    A.BILLINGSTATE
FROM CRM_LITE.VT_CRV_BKP_CLIENT_GROUP@crv_p01bobgi CG
JOIN PORTFOLIO_CODES PC ON CG.PORTFOLIO_CD = PC.PORTFOLIO_CD
JOIN CRM_LITE.V_CRV_BKP_ACCOUNT@crv_p01bobgi A ON A.client_group = CG.id
LEFT JOIN SEGMENT_CUST_SBS SEGS ON A.ECN = SEGS.ECN;
